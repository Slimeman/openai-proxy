const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');
require('dotenv').config();

const { GoogleGenAI } = require('@google/genai');
const genAI = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY }); // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ

const app = express();
const PORT = process.env.PORT || 3000;

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;

// –ø–æ–¥–∫–ª—é—á–∞—é —Ñ–∞–π–ª –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫ –Æ—Ç—É–±
const normalizeYouTubeUrl = require('./normalizeYouTubeUrl');

// –∫–æ–Ω—Å—Ç –¥–ª—è Downsub
const summaryCache = {};

function extractVideoId(url) {
  try {
    const u = new URL(url);
    return u.searchParams.get('v');
  } catch {
    return null;
  }
}

// üåç Middlewares
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// üîΩ –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç Downsub –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.post('/downsub', async (req, res) => {
  const { url } = req.body;

  if (!url) {
    return res.status(400).json({ status: 'error', message: 'YouTube URL is required' });
  }

  const normalizedUrl = normalizeYouTubeUrl(url);

  if (!normalizedUrl) {
    return res.status(400).json({ status: 'error', message: 'Invalid YouTube URL format' });
  }

  try {
    const response = await fetch('https://api.downsub.com/download', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.DOWNSUB_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ url: normalizedUrl })
    });

    const data = await response.json();
    res.json(data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /downsub:', error);
    res.status(500).json({ status: 'error', message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤' });
  }
});

// DOWNSub
app.post('/srt-summary', async (req, res) => {
  const { url } = req.body;

  const normalizedUrl = normalizeYouTubeUrl(url);

  if (!normalizedUrl) {
    return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ YouTube' });
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º videoId –∏–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
  const videoId = new URL(normalizedUrl).searchParams.get('v');

  try {
    const downsubRes = await fetch('https://api.downsub.com/download', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.DOWNSUB_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ url: normalizedUrl })
    });

    const downsubData = await downsubRes.json();
    const subtitles = downsubData?.data?.subtitles || [];

    let selectedSub = subtitles.find(sub => sub.language.toLowerCase().includes('russian')) ||
                      subtitles.find(sub => sub.language.toLowerCase().includes('english'));

    const srtUrl = selectedSub?.formats?.find(f => f.format === 'srt')?.url;
    const txtUrl = selectedSub?.formats?.find(f => f.format === 'txt')?.url;
    const vttUrl = selectedSub?.formats?.find(f => f.format === 'vtt')?.url;

    if (!txtUrl) {
      return res.status(404).json({ error: 'TXT —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
    }

    const txtText = await (await fetch(txtUrl)).text();
    const plainText = txtText.trim();

    const meta = {
      title: downsubData.data.title,
      description: downsubData.data.metadata?.description,
      thumbnail: downsubData.data.thumbnail,
      author: downsubData.data.metadata?.author,
      publishDate: downsubData.data.metadata?.publishDate,
    };

    // –ß–∞–Ω–∫–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    const chunks = [];
    const chunkSize = 8000;
    for (let i = 0; i < plainText.length; i += chunkSize) {
      chunks.push(plainText.slice(i, i + chunkSize));
    }

    let intermediateSummaries = [];

    for (let chunk of chunks) {
      const chunkPrompt = `–í–æ—Ç —á–∞—Å—Ç—å —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –≤–∏–¥–µ–æ:\n\n${chunk}\n\n–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ —ç—Ç–æ–π —á–∞—Å—Ç–∏. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.`;

      const gptRes = await fetch(`http://localhost:${PORT}/`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          messages: [
            {
              role: 'system',
              content: '–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –Æ—Ç—É–±–µ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ, –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ –≤–∏–¥–µ–æ...'
            },
            {
              role: 'user',
              content: chunkPrompt
            }
          ]
        })
      });

      const gptData = await gptRes.json();
      const summary = gptData.choices?.[0]?.message?.content || '';
      intermediateSummaries.push(summary);
    }

    const finalPrompt = `–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–∏—Ö —Å–∞–º–º–∞—Ä–∏ —á–∞—Å—Ç–µ–π –≤–∏–¥–µ–æ:\n\n${intermediateSummaries.join('\n\n')}\n\n–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞–π —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏...`;

    const finalRes = await fetch(`http://localhost:${PORT}/`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        messages: [
          {
            role: 'system',
            content: '–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –æ—á–µ–Ω—å —É–¥–æ–±–Ω–æ–µ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ –≤–∏–¥–µ–æ.'
          },
          {
            role: 'user',
            content: finalPrompt
          }
        ]
      })
    });

    const finalData = await finalRes.json();
    const finalSummary = finalData.choices?.[0]?.message?.content || '–°–∞–º–º–∞—Ä–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ';

    summaryCache[videoId] = { plainText, summary: finalSummary, meta };

    res.json({
      ...meta,
      summary: finalSummary,
      srtUrl,
      txtUrl,
      vttUrl
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /srt-summary:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤' });
  }
});


// Downsub —Ç–∞–π–º–∫–æ–¥—ã
app.post('/srt-timestamps', async (req, res) => {
  const { url } = req.body;

  const normalizedUrl = normalizeYouTubeUrl(url);

  if (!normalizedUrl) {
    return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ YouTube' });
  }

  const videoId = new URL(normalizedUrl).searchParams.get('v');

  try {
    const downsubRes = await fetch('https://api.downsub.com/download', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.DOWNSUB_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ url: normalizedUrl })
    });

    const downsubData = await downsubRes.json();
    const subtitles = downsubData?.data?.subtitles || [];

    const selectedSub = subtitles.find(sub => sub.language.toLowerCase().includes('russian')) ||
                         subtitles.find(sub => sub.language.toLowerCase().includes('english'));

    const srtUrl = selectedSub?.formats?.find(f => f.format === 'srt')?.url;

    if (!srtUrl) {
      return res.status(404).json({ error: 'SRT —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
    }

    const srtText = await (await fetch(srtUrl)).text();

    const chunks = [];
    const chunkSize = 8000;
    for (let i = 0; i < srtText.length; i += chunkSize) {
      chunks.push(srtText.slice(i, i + chunkSize));
    }

    let partialTimestamps = [];

    for (let chunk of chunks) {
      const chunkPrompt = `
–í–æ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ SRT. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Ö –∏ —Å–æ–∑–¥–∞–π SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–π–º–∫–æ–¥—ã –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:

1. –°–¥–µ–ª–∞–π –æ—Ç 10 –¥–æ 25 —Ç–∞–π–º–∫–æ–¥–æ–≤ –¥–ª—è Youtube, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ.
2. –ò—Å–ø–æ–ª—å–∑—É–π —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–ª–∏ –≤–∞–∂–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã. –ï—Å–ª–∏ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–≤—å—é ‚Äî –¥–µ–ª–∞–π —Ç–∞–π–º–∫–æ–¥—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞.
3. –ö–∞–∂–¥—ã–π —Ç–∞–π–º–∫–æ–¥ ‚Äî —ç—Ç–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞, —Ñ–æ—Ä–º–∞—Ç: 00:00 ‚Äî –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã.
4. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–∞—Ü–∏—é, –∑–≤—ë–∑–¥–æ—á–∫–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã. –¢–æ–ª—å–∫–æ —Ç–∞–π–º–∫–æ–¥, –¥–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ –∏ —Ç–µ–∫—Å—Ç.
5. –ü–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.

–í–æ—Ç —á–∞—Å—Ç—å —Å—É–±—Ç–∏—Ç—Ä–æ–≤:

${chunk}
`.trim();

      const gptRes = await fetch(`http://localhost:${PORT}/`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          messages: [
            {
              role: 'system',
              content: '–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç SEO-—Ç–∞–π–º–∫–æ–¥—ã –ø–æ —Å—É–±—Ç–∏—Ç—Ä–∞–º –≤ SRT-—Ñ–æ—Ä–º–∞—Ç–µ...'
            },
            {
              role: 'user',
              content: chunkPrompt
            }
          ]
        })
      });

      const gptData = await gptRes.json();
      const part = gptData.choices?.[0]?.message?.content || '';
      partialTimestamps.push(part);
    }

    const finalPrompt = `
–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–Ω–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ä–∞–Ω–µ–µ. –û–±—ä–µ–¥–∏–Ω–∏ –∏—Ö –≤ –µ–¥–∏–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫:

${partialTimestamps.join('\n\n')}

–°–¥–µ–ª–∞–π –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ SEO –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–π–º–∫–æ–¥–æ–≤ –¥–ª—è Youtube –æ–ø–∏—Å–∞–Ω–∏—è –∫ –≤–∏–¥–µ–æ (–ø—Ä–∏–º–µ—Ä–Ω–æ 15‚Äì25), —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

00:00 ‚Äî –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–º–µ–Ω—Ç–∞

–ë–µ–∑ –∑–≤—ë–∑–¥–æ—á–µ–∫, –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤. –í—Å—ë –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢–∞–π–º–∫–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏, —Å —Ä–∞–∑–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏ —Ö–æ—Ä–æ—à–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã —Å—é–∂–µ—Ç–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞.
`.trim();

    const finalRes = await fetch(`http://localhost:${PORT}/`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        messages: [
          {
            role: 'system',
            content: '–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç YouTube-–ø–æ–¥–∫–∞—Å—Ç–µ—Ä–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å–¥–µ–ª–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ SEO-—Ç–∞–π–º–∫–æ–¥–æ–≤. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.'
          },
          {
            role: 'user',
            content: finalPrompt
          }
        ]
      })
    });

    const finalData = await finalRes.json();
    const timestamps = finalData.choices?.[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–π–º–∫–æ–¥—ã';

    res.json({
      timestamps,
      srtUrl
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /srt-timestamps:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–π–º–∫–æ–¥–æ–≤' });
  }
});



// ‚úÖ OpenAI Proxy (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
app.post('/', async (req, res) => {
  try {
    const { messages } = req.body;
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages,
        temperature: 0.8
      })
    });

    const data = await response.json();
    res.json(data);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ YouTube. –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫ –ø–æ –≤–∏–¥–µ–æ
app.get('/analyze-video', async (req, res) => {
  const videoId = req.query.videoId;
  if (!videoId) {
    return res.status(400).json({ error: 'videoId is required' });
  }

  try {
    const apiKey = process.env.YOUTUBE_API_KEY;
    const videoUrl = `https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics,contentDetails&id=${videoId}&key=${apiKey}`;
    const response = await fetch(videoUrl);
    const data = await response.json();

    if (!data.items || data.items.length === 0) {
      return res.status(404).json({ error: '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    const item = data.items[0];
    const stats = item.statistics;
    const snippet = item.snippet;
    const contentDetails = item.contentDetails;
    const duration = parseDuration(contentDetails.duration); // ISO 8601 ‚Üí –º–∏–Ω—É—Ç—ã

    const views = parseInt(stats.viewCount || 0);
    const likes = parseInt(stats.likeCount || 0);
    const comments = parseInt(stats.commentCount || 0);
    const engagement = ((likes + comments) / views) * 100 || 0;

    const language = snippet.defaultAudioLanguage || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    const category = snippet.categoryId;

    // üí∞ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–æ—Ö–æ–¥–∞
    const revenue = estimateRevenueRange(views, language, duration, category);

    const publishDate = new Date(snippet.publishedAt);
    const now = new Date();
    const ageInDays = Math.max((now - publishDate) / (1000 * 60 * 60 * 24), 1);
    const avgViewsPerDay = views / ageInDays;

    res.json({
      channelTitle: snippet.channelTitle,
      title: snippet.title,
      description: snippet.description,
      thumbnail: snippet.thumbnails?.medium?.url,
      language,
      publishedAt: snippet.publishedAt,
      duration: duration.toFixed(2),
      views,
      likes,
      comments,
      engagement: engagement.toFixed(2),
      revenueRange: revenue.map(r => `$${r.toFixed(2)}`),
      avgViewsPerDay: Math.round(avgViewsPerDay),
      category,
      growthStatus: avgViewsPerDay < 30 ? '–Ω–∏–∑–∫–∏–π' : avgViewsPerDay < 100 ? '—Å—Ä–µ–¥–Ω–∏–π' : '—Ö–æ—Ä–æ—à–∏–π',
    });

  } catch (error) {
    console.error(error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∏–¥–µ–æ' });
  }
});

function parseDuration(isoDuration) {
  const match = isoDuration.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);
  if (!match) return 0;
  const hours = parseInt(match[1] || 0);
  const minutes = parseInt(match[2] || 0);
  const seconds = parseInt(match[3] || 0);
  return hours * 60 + minutes + seconds / 60;
}

// üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–æ—Ö–æ–¥–∞ (–æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ $1500‚Äì$2500 –ø—Ä–∏ 440k)
function estimateRevenueRange(views, language, duration, categoryId) {
  let baseRPM = 0.0045; // –±–∞–∑–æ–≤—ã–π RPM = $4.5 –∑–∞ 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤

  // üìå –Ø–∑—ã–∫
  if (language && typeof language === 'string') {
    const lang = language.toLowerCase();
    if (lang.startsWith('en')) baseRPM += 0.002; // –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç ‚Üí boost
  }

  // ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  if (duration >= 10 && duration < 30) baseRPM += 0.0015;
  else if (duration >= 30 && duration < 60) baseRPM += 0.003;
  else if (duration >= 60) baseRPM += 0.004;

  // üé¨ –ö–∞—Ç–µ–≥–æ—Ä–∏—è CPM –±—É—Å—Ç—ã
  const categoryCPM = {
    '1': -0.002,
    '10': -0.003,
    '17': +0.001,
    '19': +0.001,
    '20': -0.003,
    '22': +0.001, // –õ—é–¥–∏ –∏ –±–ª–æ–≥–∏ ‚Äî —Ç–≤–æ—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    '23': -0.002,
    '24': -0.002,
    '25': +0.003,
    '26': +0.002,
    '27': +0.004,
    '28': +0.005
  };

  baseRPM += categoryCPM[categoryId] || 0;

  // –ò—Ç–æ–≥–æ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Ö–æ–¥–∞
  const rpmLow = Math.max(baseRPM * 0.85, 0.0025);
  const rpmHigh = baseRPM * 1.3;

  return [views * rpmLow, views * rpmHigh];
}




// ‚úÖ –ù–æ–≤—ã–π SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
app.get('/seo-optimize', async (req, res) => {
  const videoId = req.query.videoId;
  if (!videoId) {
    return res.status(400).json({ error: 'videoId is required' });
  }

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º title + description —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API
    const metaRes = await fetch(`http://localhost:${PORT}/analyze-video?videoId=${videoId}`);
    const meta = await metaRes.json();

    if (meta.error) {
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ' });
    }

    const prompt = `
–¢—ã –ª—É—á—à–∏–π –Æ—Ç—É–±–µ—Ä –∏ SEO-–∫–ª–∏–∫–±–µ–π—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ –º–∏—Ä–µ.
–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∏–∂–µ —Å–¥–µ–ª–∞–π:

1. 5 –∫–ª–∏–∫–±–µ–π—Ç–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –ø—Ä–µ–≤—å—é (–ù–µ –±–æ–ª–µ–µ 3—Ö —Å–ª–æ–≤)
2. 5 SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
3. SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ
4. –û–ø—Ä–µ–¥–µ–ª–∏ –µ—Å—Ç—å –ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ç–∞–π–º–∫–æ–¥—ã –∏ –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –¥–∞–π –µ—â—ë SEO –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–π–º–∫–æ–¥—ã
5. –°–¥–µ–ª–∞–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ –∑–Ω–∞—á–∫–∞ —Ö–µ—à—Ç–µ–≥–∞, —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –±–ª–æ–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ Youtube

–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${meta.title}
–û–ø–∏—Å–∞–Ω–∏–µ: ${meta.description}
    `.trim();

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI —á–µ—Ä–µ–∑ / (–ª–æ–∫–∞–ª—å–Ω—ã–π proxy)
    const gptRes = await fetch(`http://localhost:${PORT}/`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ messages: [{ role: 'user', content: prompt }] })
    });

    const gptData = await gptRes.json();

    if (!gptData.choices) {
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç OpenAI' });
    }

    res.json({
      originalTitle: meta.title,
      originalDescription: meta.description,
      optimizedText: gptData.choices[0].message.content
    });

  } catch (error) {
    console.error(error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏' });
  }
});

// ‚úÖ –Æ—Ç—É–± —Ç—Ä–µ–Ω–¥—ã –∑–∞ 7 –¥–Ω–µ–π
app.get('/youtube-trends', async (req, res) => {
  const query = req.query.query;
  if (!query) return res.status(400).json({ error: 'query is required' });

  const publishedAfter = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(); // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –ø–æ –∫–ª—é—á–µ–≤–∏–∫—É
    const searchUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(query)}&maxResults=20&order=viewCount&publishedAfter=${publishedAfter}&type=video&regionCode=RU&key=${YOUTUBE_API_KEY}`;
    const searchRes = await fetch(searchUrl);
    const searchData = await searchRes.json();

    const videoIds = searchData.items.map(item => item.id.videoId).join(',');

    // 2. –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø. –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∏–¥–µ–æ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å + –ø—Ä–æ—Å–º–æ—Ç—Ä—ã)
    const detailsUrl = `https://www.googleapis.com/youtube/v3/videos?part=contentDetails,statistics,snippet&id=${videoIds}&key=${YOUTUBE_API_KEY}`;
    const detailsRes = await fetch(detailsUrl);
    const detailsData = await detailsRes.json();

    // 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É –¥–∞–Ω–Ω—ã–µ
    res.json({ items: detailsData.items.map(item => ({
      id: item.id,
      snippet: item.snippet,
      statistics: item.statistics,
      contentDetails: item.contentDetails
    }))});
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ YouTube —Ç—Ä–µ–Ω–¥–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ YouTube API' });
  }
});

// ‚úÖ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Gemini
// ‚úÖ –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ YouTube-—Å—Å—ã–ª–∫–∏ —Å –ø–æ–º–æ—â—å—é Gemini
app.post('/gemini-summary', async (req, res) => {
  const { url } = req.body;

  if (!url) {
    return res.status(400).json({ error: 'url is required' });
  }

  const prompt = `
–û—Ç–ø—Ä–∞–≤–ª—è—é —Å—Å—ã–ª–∫—É –Ω–∞ Youtube –≤–∏–¥–µ–æ: ${url}
–°–¥–µ–ª–∞–π –º–Ω–µ —Å–∞–º–º–∞—Ä–∏
`.trim();

  try {
const result = await genAI.models.generateContent({
  model: 'models/gemini-2.5-pro-preview-03-25',
  contents: [
    {
      role: 'user',
      parts: [{ text: prompt }]
    }
  ]
});

console.log('Gemini raw:', JSON.stringify(result, null, 2));

const text = result?.candidates?.[0]?.content?.parts?.[0]?.text || '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω';
res.json({ summary: text });

  } catch (error) {
    console.error('Gemini error:', error);
    res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –æ—Ç Gemini API' });
  }
});



app.listen(PORT, () => {
  console.log(`Proxy server running on port ${PORT}`);
});



