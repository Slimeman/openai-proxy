const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');
require('dotenv').config();

const { GoogleGenAI } = require('@google/genai');
const genAI = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY }); // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ

const app = express();
const PORT = process.env.PORT || 3000;

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;

// –∫–æ–Ω—Å—Ç –¥–ª—è Downsub
const summaryCache = {}; // { [videoId]: { plainText, summary, meta } }

function extractVideoId(url) {
  try {
    const u = new URL(url);
    return u.searchParams.get('v');
  } catch {
    return null;
  }
}

// üåç Middlewares
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// DOWNSub
app.post('/srt-summary', async (req, res) => {
  const { url } = req.body;
  const videoId = extractVideoId(url);
  if (!videoId) return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ YouTube' });

  try {
    const downsubRes = await fetch('https://api.downsub.com/download', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.DOWNSUB_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ url })
    });

    const downsubData = await downsubRes.json();
    const subtitles = downsubData?.data?.subtitles || [];

    const ruSrtUrl = subtitles
      .find(sub => sub.language.toLowerCase().includes('russian'))
      ?.formats?.find(f => f.format === 'srt')?.url;

    if (!ruSrtUrl) {
      return res.status(404).json({ error: '–†—É—Å—Å–∫–∏–π SRT –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const srtText = await (await fetch(ruSrtUrl)).text();
    const plainText = srtText
      .replace(/\d+\n/g, '')
      .replace(/\d{2}:\d{2}:\d{2},\d{3} --> .*\n/g, '')
      .replace(/\n+/g, ' ')
      .trim();

    const meta = {
      title: downsubData.data.title,
      description: downsubData.data.metadata?.description,
      thumbnail: downsubData.data.thumbnail,
      author: downsubData.data.metadata?.author,
      publishDate: downsubData.data.metadata?.publishDate,
    };

    // ‚úÖ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ videoId
    summaryCache[videoId] = { plainText, summary: null, meta };

    const gptRes = await fetch(`http://localhost:${PORT}/`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        messages: [
          {
            role: 'system',
            content: '–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ, –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ –≤–∏–¥–µ–æ.'
          },
          {
            role: 'user',
            content: `–í–æ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã –≤–∏–¥–µ–æ:\n\n${plainText}\n\n–°–¥–µ–ª–∞–π —Ö–æ—Ä–æ—à–µ–µ —Å–∞–º–º–∞—Ä–∏. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.`
          }
        ]
      })
    });

    const gptData = await gptRes.json();
    const summary = gptData.choices?.[0]?.message?.content || '–°–∞–º–º–∞—Ä–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ';
    summaryCache[videoId].summary = summary;

    res.json({
      ...meta,
      summary,
      downloadUrl: `/download-text?videoId=${videoId}`
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /srt-summary:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤' });
  }
});

// üìÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
app.get('/download-text', (req, res) => {
  const { videoId } = req.query;
  if (!videoId) return res.status(400).send('videoId is required');

  const cached = summaryCache[videoId];
  if (!cached || !cached.plainText) {
    return res.status(404).send('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  const filename = (cached.meta?.title || 'video').replace(/[<>:"/\\|?*]+/g, '') + '.txt';
  res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
  res.setHeader('Content-Type', 'text/plain; charset=utf-8');
  res.send(cached.plainText);
});


// ‚úÖ OpenAI Proxy (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
app.post('/', async (req, res) => {
  try {
    const { messages } = req.body;
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages,
        temperature: 0.8
      })
    });

    const data = await response.json();
    res.json(data);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// ‚úÖ –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å YouTube
app.get('/analyze-video', async (req, res) => {
  const videoId = req.query.videoId;
  if (!videoId) {
    return res.status(400).json({ error: 'videoId is required' });
  }

  try {
    const apiKey = process.env.YOUTUBE_API_KEY;
    const videoUrl = `https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics,contentDetails&id=${videoId}&key=${apiKey}`;
    const response = await fetch(videoUrl);
    const data = await response.json();

    if (!data.items || data.items.length === 0) {
      return res.status(404).json({ error: '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    const item = data.items[0];
    const stats = item.statistics;
    const snippet = item.snippet;
    const duration = parseDuration(item.contentDetails.duration); // ISO 8601 ‚Üí –º–∏–Ω—É—Ç—ã

    const views = parseInt(stats.viewCount || 0);
    const likes = parseInt(stats.likeCount || 0);
    const comments = parseInt(stats.commentCount || 0); // ‚úÖ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å
    const engagement = ((likes + comments) / views) * 100 || 0;
    const revenue = [views * 0.001, views * 0.005];
    const publishDate = new Date(snippet.publishedAt);
    const now = new Date();
    const ageInDays = Math.max((now - publishDate) / (1000 * 60 * 60 * 24), 1);
    const avgViewsPerDay = views / ageInDays;

    res.json({
      channelTitle: snippet.channelTitle,
      title: snippet.title,
      description: snippet.description, // ‚úÖ –¥–æ–±–∞–≤–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ
      thumbnail: snippet.thumbnails?.medium?.url,
      language: snippet.defaultAudioLanguage || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      publishedAt: snippet.publishedAt,
      duration: duration.toFixed(2),
      views,
      likes,
      comments, // ‚úÖ —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
      engagement: engagement.toFixed(2),
      revenueRange: revenue.map(r => `$${r.toFixed(2)}`),
      avgViewsPerDay: Math.round(avgViewsPerDay),
      category: snippet.categoryId,
      growthStatus: avgViewsPerDay < 30 ? '–Ω–∏–∑–∫–∏–π' : avgViewsPerDay < 100 ? '—Å—Ä–µ–¥–Ω–∏–π' : '—Ö–æ—Ä–æ—à–∏–π',
    });

  } catch (error) {
    console.error(error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∏–¥–µ–æ' });
  }
});

function parseDuration(isoDuration) {
  const match = isoDuration.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);
  if (!match) return 0;
  const hours = parseInt(match[1] || 0);
  const minutes = parseInt(match[2] || 0);
  const seconds = parseInt(match[3] || 0);
  return hours * 60 + minutes + seconds / 60;
}

// ‚úÖ –ù–æ–≤—ã–π SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
app.get('/seo-optimize', async (req, res) => {
  const videoId = req.query.videoId;
  if (!videoId) {
    return res.status(400).json({ error: 'videoId is required' });
  }

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º title + description —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API
    const metaRes = await fetch(`http://localhost:${PORT}/analyze-video?videoId=${videoId}`);
    const meta = await metaRes.json();

    if (meta.error) {
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ' });
    }

    const prompt = `
–¢—ã –ª—É—á—à–∏–π –Æ—Ç—É–±–µ—Ä –∏ SEO-–∫–ª–∏–∫–±–µ–π—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ –º–∏—Ä–µ.
–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∏–∂–µ —Å–¥–µ–ª–∞–π:

1. 5 –∫–ª–∏–∫–±–µ–π—Ç–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –ø—Ä–µ–≤—å—é (–ù–µ –±–æ–ª–µ–µ 3—Ö —Å–ª–æ–≤)
2. 5 SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
3. SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ
4. –û–ø—Ä–µ–¥–µ–ª–∏ –µ—Å—Ç—å –ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ç–∞–π–º–∫–æ–¥—ã –∏ –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –¥–∞–π –µ—â—ë SEO –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–π–º–∫–æ–¥—ã
5. –°–¥–µ–ª–∞–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ –∑–Ω–∞—á–∫–∞ —Ö–µ—à—Ç–µ–≥–∞, —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –±–ª–æ–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ Youtube

–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${meta.title}
–û–ø–∏—Å–∞–Ω–∏–µ: ${meta.description}
    `.trim();

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI —á–µ—Ä–µ–∑ / (–ª–æ–∫–∞–ª—å–Ω—ã–π proxy)
    const gptRes = await fetch(`http://localhost:${PORT}/`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ messages: [{ role: 'user', content: prompt }] })
    });

    const gptData = await gptRes.json();

    if (!gptData.choices) {
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç OpenAI' });
    }

    res.json({
      originalTitle: meta.title,
      originalDescription: meta.description,
      optimizedText: gptData.choices[0].message.content
    });

  } catch (error) {
    console.error(error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏' });
  }
});

// ‚úÖ –Æ—Ç—É–± —Ç—Ä–µ–Ω–¥—ã –∑–∞ 7 –¥–Ω–µ–π
app.get('/youtube-trends', async (req, res) => {
  const query = req.query.query;
  if (!query) return res.status(400).json({ error: 'query is required' });

  const publishedAfter = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(); // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –ø–æ –∫–ª—é—á–µ–≤–∏–∫—É
    const searchUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(query)}&maxResults=20&order=viewCount&publishedAfter=${publishedAfter}&type=video&regionCode=RU&key=${YOUTUBE_API_KEY}`;
    const searchRes = await fetch(searchUrl);
    const searchData = await searchRes.json();

    const videoIds = searchData.items.map(item => item.id.videoId).join(',');

    // 2. –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø. –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∏–¥–µ–æ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å + –ø—Ä–æ—Å–º–æ—Ç—Ä—ã)
    const detailsUrl = `https://www.googleapis.com/youtube/v3/videos?part=contentDetails,statistics,snippet&id=${videoIds}&key=${YOUTUBE_API_KEY}`;
    const detailsRes = await fetch(detailsUrl);
    const detailsData = await detailsRes.json();

    // 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É –¥–∞–Ω–Ω—ã–µ
    res.json({ items: detailsData.items.map(item => ({
      id: item.id,
      snippet: item.snippet,
      statistics: item.statistics,
      contentDetails: item.contentDetails
    }))});
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ YouTube —Ç—Ä–µ–Ω–¥–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ YouTube API' });
  }
});

// ‚úÖ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Gemini
// ‚úÖ –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ YouTube-—Å—Å—ã–ª–∫–∏ —Å –ø–æ–º–æ—â—å—é Gemini
app.post('/gemini-summary', async (req, res) => {
  const { url } = req.body;

  if (!url) {
    return res.status(400).json({ error: 'url is required' });
  }

  const prompt = `
–û—Ç–ø—Ä–∞–≤–ª—è—é —Å—Å—ã–ª–∫—É –Ω–∞ Youtube –≤–∏–¥–µ–æ: ${url}
–°–¥–µ–ª–∞–π –º–Ω–µ —Å–∞–º–º–∞—Ä–∏
`.trim();

  try {
const result = await genAI.models.generateContent({
  model: 'models/gemini-2.5-pro-preview-03-25',
  contents: [
    {
      role: 'user',
      parts: [{ text: prompt }]
    }
  ]
});

console.log('Gemini raw:', JSON.stringify(result, null, 2));

const text = result?.candidates?.[0]?.content?.parts?.[0]?.text || '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω';
res.json({ summary: text });

  } catch (error) {
    console.error('Gemini error:', error);
    res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –æ—Ç Gemini API' });
  }
});



app.listen(PORT, () => {
  console.log(`Proxy server running on port ${PORT}`);
});



